// Package httper is a cli tool to implement http interface of a type.
package main

import (
	"bytes"
	"flag"
	"fmt"
	"go/ast"
	"io"
	"os"
	"os/exec"
	"path/filepath"
	"strings"

	"github.com/mh-cbon/astutil"
)

var name = "httper"
var version = "0.0.0"

func main() {

	var help bool
	var h bool
	var ver bool
	var v bool
	var outPkg string
	flag.BoolVar(&help, "help", false, "Show help.")
	flag.BoolVar(&h, "h", false, "Show help.")
	flag.BoolVar(&ver, "version", false, "Show version.")
	flag.BoolVar(&v, "v", false, "Show version.")
	flag.StringVar(&outPkg, "p", os.Getenv("GOPACKAGE"), "Package name of the new code.")

	flag.Parse()

	if ver || v {
		showVer()
		return
	}
	if help || h {
		showHelp()
		return
	}

	if flag.NArg() < 2 {
		panic("wrong usage")
	}
	args := flag.Args()

	pkgToLoad := getPkgToLoad()
	dest := os.Stdout

	o := args[0]
	restargs := args[1:]

	prog := astutil.GetProgram(pkgToLoad).Package(pkgToLoad)

	foundMethods := astutil.FindMethods(prog)

	if o != "-" {
		f, err := os.Create(o)
		if err != nil {
			panic(err)
		}
		dest = f
		defer func() {
			f.Close()
			cmd := exec.Command("go", "fmt", args[0])
			cmd.Stdout = os.Stdout
			cmd.Stderr = os.Stderr
			cmd.Run()
		}()
	}

	fmt.Fprintf(dest, "package %v\n\n", outPkg)
	fmt.Fprintln(dest, `// file generated by`)
	fmt.Fprintf(dest, "// github.com/mh-cbon/%v\n", name)
	fmt.Fprintln(dest, `// do not edit`)
	fmt.Fprintln(dest, "")
	fmt.Fprintf(dest, "import (\n")
	fmt.Fprintf(dest, "	%q\n", "io")
	fmt.Fprintf(dest, "	%q\n", "net/http")
	fmt.Fprintf(dest, "	%q\n", "strconv")
	fmt.Fprintf(dest, ")\n")
	fmt.Fprintf(dest, "\n\n")
	// cheat.
	fmt.Fprintf(dest, `var xxStrconvAtoi = strconv.Atoi
var xxIoCopy = io.Copy
var xxHTTPOk = http.StatusOK
`)

	for _, todo := range restargs {
		y := strings.Split(todo, ":")
		if len(y) != 2 {
			panic("wrong name " + todo)
		}

		res := processType(y[1], y[0], foundMethods)
		io.Copy(dest, &res)
	}
}

func showVer() {
	fmt.Printf("%v %v\n", name, version)
}

func showHelp() {
	showVer()
	fmt.Println()
	fmt.Println("Usage")
	fmt.Println()
	fmt.Printf("	%v [-p name] [out] [...types]\n\n", name)
	fmt.Printf("	out:   Output destination of the results, use '-' for stdout.\n")
	fmt.Printf("	types: A list of types such as src:dst.\n")
	fmt.Printf("	-p:    The name of the package output.\n")
	fmt.Println()
}

func processType(destName, srcName string, foundMethods map[string][]*ast.FuncDecl) bytes.Buffer {

	var b bytes.Buffer
	dest := &b

	fmt.Fprintf(dest, `
// %v is an httper of %v.
type %v struct{
	embed %v
}
		`, destName, srcName, destName, srcName)

	srcConcrete := astutil.GetUnpointedType(srcName)

	fmt.Fprintf(dest, `// New%v constructs an httper of %v
func New%v(embed %v) *%v {
	ret := &%v{
		embed: embed,
	}
  return ret
}
`,
		destName, srcName, destName, srcName, destName, destName)
	fmt.Fprintln(dest)

	for _, m := range foundMethods[srcConcrete] {

		methodName := astutil.MethodName(m)
		params := astutil.MethodParams(m)
		paramNames := astutil.MethodParamNames(m)
		paramTypes := astutil.MethodParamTypes(m)
		dstStar := astutil.GetPointedType(destName)

		if astutil.IsExported(methodName) == false {
			break
		}

		methodInvokation := ""
		if paramsLen(params) == 1 && paramType(params) == "io.Reader" { // todo: can do better.
			methodInvokation = fmt.Sprintf("res, err := t.embed.%v(r.Body)\n", methodName)

		} else {
			lParamNames := strings.Split(paramNames, ",")
			lParamTypes := strings.Split(paramTypes, ",")
			for i, p := range lParamNames {
				p = strings.TrimSpace(p)
				if p == "reqBody" {
					methodInvokation += fmt.Sprintf("reqBody :=	r.Body\n")
				} else {
					found := false
					prefixes := []string{"url", "get", "req", "post", "cookie", "route"} // note: route prefix is not handled with this muxer.
					for _, prefix := range prefixes {
						if strings.HasPrefix(p, prefix) {
							methodInvokation += fmt.Sprintf("var %v %v\n", p, lParamTypes[i])
							name := p[len(prefix):]

							if prefix == "get" || prefix == "url" { // in this muxer they are the same
								expr := fmt.Sprintf("r.URL.Query().Get(%q)", name)
								methodInvokation += convertedStr(p, expr, lParamTypes[i])

							} else if prefix == "post" {
								methodInvokation += fmt.Sprintf("err = r.ParseForm()\n")
								methodInvokation += handleErr("err")
								expr := fmt.Sprintf("r.FormValue(%q)", name)
								methodInvokation += convertedStr(p, expr, lParamTypes[i])

							} else if prefix == "req" {
								expr := fmt.Sprintf("r.URL.Query().Get(%q)", name)
								methodInvokation += convertedStr(p, expr, lParamTypes[i])
								f := fmt.Sprintf("err = r.ParseForm()\n")
								f += handleErr("err")
								f += fmt.Sprintf("%v = r.FormValue(%q)", p, name)
								methodInvokation += fmt.Sprintf(`if %v == "" {
%v
}
`,
									p, f)
							}
							found = true
							break
						}
					}
					if !found {
						methodInvokation += fmt.Sprintf("var %v %v\n", p, lParamTypes[i])
					}
				}
			}
			methodInvokation += fmt.Sprintf("res, err := t.embed.%v(%v)\n", methodName, paramNames)
		}

		errHandle := handleErr("err")

		outHandle := fmt.Sprintf(`w.WriteHeader(http.StatusOK)
w.Header().Set("Content-Type", "application/json") // todo: not static.
io.Copy(w, res)
`)

		body := fmt.Sprintf(`
		  %v
		  %v
		  %v
`, methodInvokation, errHandle, outHandle)

		fmt.Fprintf(dest, `// %v invoke %v.%v using the request body as a json payload.
func (t %v) %v(w http.ResponseWriter, r *http.Request) {
  %v
}`,
			methodName, srcName, methodName, dstStar, methodName, body)
		fmt.Fprintln(dest)
	}

	return b
}

func convertedStr(toVarName, expr string, toType string) string {
	if toType == "int" {
		expr = convStrToInt(expr, toVarName)
	} else {
		expr = fmt.Sprintf("%v := %v\n", toVarName, expr)
	}
	return expr
}
func convStrToInt(fromVarName, toVarName string) string {
	methodInvokation := fmt.Sprintf("%v, err := strconv.Atoi(%v)\n", toVarName, fromVarName)
	methodInvokation += handleErr("err")
	return methodInvokation
}
func handleErr(errVarName string) string {
	methodInvokation := fmt.Sprintf(`if %v != nil {
w.WriteHeader(http.StatusInternalServerError) // todo: not static.
io.WriteString(w, %v.Error()) // todo: not static.
return
}
`, errVarName, errVarName)
	return methodInvokation
}
func paramsHas(params string, what string) bool {
	return strings.Index(params, what) > -1 //todo: can do better.
}
func paramsLen(params string) int {
	return len(strings.Split(params, ","))
}
func paramType(params string) string {
	x := strings.Split(params, ",")
	return x[len(x)-1]
}

func getPkgToLoad() string {
	gopath := filepath.Join(os.Getenv("GOPATH"), "src")
	pkgToLoad, err := os.Getwd()
	if err != nil {
		panic(err)
	}
	return pkgToLoad[len(gopath)+1:]
}
