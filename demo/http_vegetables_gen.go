package main

// file generated by
// github.com/mh-cbon/httper
// do not edit

import (
	"io"
	"net/http"
	"strconv"
)

var xxStrconvAtoi = strconv.Atoi
var xxIoCopy = io.Copy
var xxHTTPOk = http.StatusOK

// HTTPController is an httper of *JSONController.
type HTTPController struct {
	embed *JSONController
}

// NewHTTPController constructs an httper of *JSONController
func NewHTTPController(embed *JSONController) *HTTPController {
	ret := &HTTPController{
		embed: embed,
	}
	return ret
}

// GetByID invoke *JSONController.GetByID using the request body as a json payload.
func (t *HTTPController) GetByID(w http.ResponseWriter, r *http.Request) {

	var urlID int
	urlID, err := strconv.Atoi(r.URL.Query().Get("ID"))
	if err != nil {
		w.WriteHeader(http.StatusInternalServerError) // todo: not static.
		io.WriteString(w, err.Error())                // todo: not static.
		return
	}
	res, err := t.embed.GetByID(urlID)

	if err != nil {
		w.WriteHeader(http.StatusInternalServerError) // todo: not static.
		io.WriteString(w, err.Error())                // todo: not static.
		return
	}

	w.WriteHeader(http.StatusOK)
	w.Header().Set("Content-Type", "application/json") // todo: not static.
	io.Copy(w, res)

}

// UpdateByID invoke *JSONController.UpdateByID using the request body as a json payload.
func (t *HTTPController) UpdateByID(w http.ResponseWriter, r *http.Request) {

	var urlID int
	urlID, err := strconv.Atoi(r.URL.Query().Get("ID"))
	if err != nil {
		w.WriteHeader(http.StatusInternalServerError) // todo: not static.
		io.WriteString(w, err.Error())                // todo: not static.
		return
	}
	reqBody := r.Body
	res, err := t.embed.UpdateByID(urlID, reqBody)

	if err != nil {
		w.WriteHeader(http.StatusInternalServerError) // todo: not static.
		io.WriteString(w, err.Error())                // todo: not static.
		return
	}

	w.WriteHeader(http.StatusOK)
	w.Header().Set("Content-Type", "application/json") // todo: not static.
	io.Copy(w, res)

}

// DeleteByID invoke *JSONController.DeleteByID using the request body as a json payload.
func (t *HTTPController) DeleteByID(w http.ResponseWriter, r *http.Request) {

	var reqID int
	reqID, err := strconv.Atoi(r.URL.Query().Get("ID"))
	if err != nil {
		w.WriteHeader(http.StatusInternalServerError) // todo: not static.
		io.WriteString(w, err.Error())                // todo: not static.
		return
	}
	if reqID == "" {
		err = r.ParseForm()
		if err != nil {
			w.WriteHeader(http.StatusInternalServerError) // todo: not static.
			io.WriteString(w, err.Error())                // todo: not static.
			return
		}
		reqID = r.FormValue("ID")
	}
	res, err := t.embed.DeleteByID(reqID)

	if err != nil {
		w.WriteHeader(http.StatusInternalServerError) // todo: not static.
		io.WriteString(w, err.Error())                // todo: not static.
		return
	}

	w.WriteHeader(http.StatusOK)
	w.Header().Set("Content-Type", "application/json") // todo: not static.
	io.Copy(w, res)

}
