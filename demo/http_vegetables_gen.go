package main

// file generated by
// github.com/mh-cbon/httper
// do not edit

import (
	"io"
	"net/http"
	"strconv"
)

var xxStrconvAtoi = strconv.Atoi
var xxIoCopy = io.Copy
var xxHTTPOk = http.StatusOK

// HTTPController is an httper of *JSONController.
type HTTPController struct {
	embed *JSONController
}

// NewHTTPController constructs an httper of *JSONController
func NewHTTPController(embed *JSONController) *HTTPController {
	ret := &HTTPController{
		embed: embed,
	}
	return ret
}

// HandleError prints http 500 and prints the error.
func (t HTTPController) HandleError(err error, w http.ResponseWriter, r *http.Request) bool {
	if err == nil {
		return false
	}
	w.WriteHeader(http.StatusInternalServerError)
	io.WriteString(w, err.Error())
	return true
}

// HandleSuccess prints http 500 and prints the error.
func (t HTTPController) HandleSuccess(w http.ResponseWriter, r io.Reader) error {
	w.WriteHeader(http.StatusOK)
	_, err := io.Copy(w, r)
	return err
}

// GetByID invoke *JSONController.GetByID using the request body as a json payload.
func (t *HTTPController) GetByID(w http.ResponseWriter, r *http.Request) {

	var urlID int
	tempurlID, err := strconv.Atoi(r.URL.Query().Get("ID"))
	urlID = tempurlID
	if t.HandleError(err, w, r) {
		return
	}

	res, err := t.embed.GetByID(urlID)
	if t.HandleError(err, w, r) {
		return
	}

	t.HandleSuccess(w, res)

}

// UpdateByID invoke *JSONController.UpdateByID using the request body as a json payload.
func (t *HTTPController) UpdateByID(w http.ResponseWriter, r *http.Request) {

	var urlID int
	tempurlID, err := strconv.Atoi(r.URL.Query().Get("ID"))
	urlID = tempurlID
	if t.HandleError(err, w, r) {
		return
	}
	reqBody := r.Body

	res, err := t.embed.UpdateByID(urlID, reqBody)
	if t.HandleError(err, w, r) {
		return
	}

	t.HandleSuccess(w, res)

}

// DeleteByID invoke *JSONController.DeleteByID using the request body as a json payload.
func (t *HTTPController) DeleteByID(w http.ResponseWriter, r *http.Request) {

	var reqID int
	reqValues := r.URL.Query()
	if _, ok := reqValues["ID"]; ok {
		tempreqID, err := strconv.Atoi(r.URL.Query().Get("ID"))
		reqID = tempreqID
		if t.HandleError(err, w, r) {
			return
		}

	} else {
		parseFormErr := r.ParseForm()
		if t.HandleError(parseFormErr, w, r) {
			return
		}

		tempreqID, err := strconv.Atoi(r.FormValue("ID"))
		reqID = tempreqID
		if t.HandleError(err, w, r) {
			return
		}

	}

	res, err := t.embed.DeleteByID(reqID)
	if t.HandleError(err, w, r) {
		return
	}

	t.HandleSuccess(w, res)

}
